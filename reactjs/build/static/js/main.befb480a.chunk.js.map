{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","names","frequency","setFrequency","isLoading","setLoading","downloadFile","selected","console","log","info","process","content","URL","window","location","origin","Promise","res","rej","fetch","headers","city","then","blob","result","error","getFile","saveAs","catch","err","theme","defaultTheme","areas","columns","rows","height","gap","backgroundColor","gridArea","style","padding","length","aria-label","selectionMode","onSelectionChange","width","map","ele","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QA2FeA,MAtFf,WAAgB,IAAD,EACaC,mBAAS,CAAC,SAAU,QAAS,SAAU,MAAO,SAAU,UADrE,mBACNC,EADM,aAEmBD,mBAAS,KAF5B,mBAERE,EAFQ,KAEGC,EAFH,OAGiBH,oBAAS,GAH1B,mBAGRI,EAHQ,KAGGC,EAHH,KAiCPC,EAAe,SAACC,GACpBC,QAAQC,IAAI,eAAZ,YAAgCF,IAChCC,QAAQE,KAAKC,QACbR,EAAa,YAAII,GAAU,IA9Bb,SAACK,GACfP,GAAW,GACX,IAAMQ,EAAsEC,OAAOC,SAASC,OAE5F,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvBC,MAAM,GAAD,OAAIP,EAAJ,aAAoB,CACvBQ,QAAS,CACPC,KAAMV,KAGPW,MAAK,SAAAL,GAAG,OAAIA,EAAIM,UAChBD,MACC,SAACE,GACCjB,QAAQC,IAAI,SAAUgB,GACtBpB,GAAW,GACXa,EAAIO,MAEN,SAACC,GACClB,QAAQkB,MAAM,QAASA,GACvBrB,GAAW,GACXc,EAAIO,SAYZC,CAAQ,YAAIpB,GAAU,IAAIgB,MAAK,SAACL,GAC9BV,QAAQC,IAAI,QAASS,GACrBU,iBAAOV,EAAD,UAAS,YAAIX,GAAU,GAAvB,YACLsB,OAAM,SAACC,QAMZ,OAEE,cAAC,IAAD,CAAUC,MAAOC,IAAjB,SAEE,eAAC,IAAD,CACEC,MAAO,CAAC,iBAAkB,kBAAmB,kBAC7CC,QAAS,CAAC,MAAO,OACjBC,KAAM,CAAC,YAAa,OAAQ,aAC5BC,OAAO,YACPC,IAAI,WALN,UAME,cAAC,IAAD,CAAMC,gBAAgB,aAAaC,SAAS,SAA5C,SACE,4DAEF,cAAC,IAAD,CAAMA,SAAS,UAAf,SACE,oBAAIC,MAAO,CAAEC,QAAS,MAAtB,wDAEF,eAAC,IAAD,CAAMF,SAAS,UAAf,UAEIrC,EAAUwC,OAAS,GACnB,gDAAmBxC,KAErB,cAAC,IAAD,CACEE,UAAWA,EACXuC,aAAW,mBACXC,cAAc,SACdC,kBAAmB,SAACtC,GAAD,OAAcD,EAAaC,IAC9CuC,MAAM,YALR,SAOI7C,EAAM8C,KAAI,SAACC,GAAD,OAAS,cAAC,IAAD,UAAiBA,GAANA,iBCpE7BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.befb480a.chunk.js","sourcesContent":["import { Provider, defaultTheme } from '@adobe/react-spectrum';\nimport { ListBox, Item, Grid, View } from '@adobe/react-spectrum'\nimport { useState } from 'react';\nimport { saveAs } from 'file-saver';\n\nfunction App() {\n  const [names, setNames] = useState(['Warsaw', 'Delhi', 'Madrid', 'NYC', 'Moscow', 'Paris'])\n  let [frequency, setFrequency] = useState('');\n  let [isLoading, setLoading] = useState(false);\n\n\n  const getFile = (content) => {\n    setLoading(true);\n    const URL = process.env.REACT_APP_ENV === 'dev' ? 'http://localhost:8000' : window.location.origin\n\n    return new Promise((res, rej) => {\n      fetch(`${URL}/download`, {\n        headers: {\n          city: content\n        }\n      })\n        .then(res => res.blob())\n        .then(\n          (result) => {\n            console.log('result', result)\n            setLoading(false);\n            res(result);\n          },\n          (error) => {\n            console.error('Error', error)\n            setLoading(false);\n            rej(error);\n          }\n        )\n    })\n\n  }\n\n  const downloadFile = (selected) => {\n    console.log('I am clicked', [...selected]);\n    console.info(process.env.REACT_APP_ENV);\n    setFrequency([...selected][0]);\n\n    getFile([...selected][0]).then((res) => {\n      console.log('final', res);\n      saveAs(res, `${[...selected][0]}.txt`)\n    }).catch((err) => {\n\n    })\n\n\n  }\n  return (\n\n    <Provider theme={defaultTheme}>\n\n      <Grid\n        areas={['header  header', 'sidebar content', 'footer  footer']}\n        columns={['1fr', '3fr']}\n        rows={['size-1000', 'auto', 'size-1000']}\n        height=\"size-6000\"\n        gap=\"size-100\">\n        <View backgroundColor=\"celery-600\" gridArea=\"header\" >\n          <h1> Click and Download app </h1>\n        </View>\n        <View gridArea=\"sidebar\" >\n          <h2 style={{ padding: '5%' }}> Click on the list item to download file</h2>\n        </View>\n        <View gridArea=\"content\">\n          {\n            frequency.length > 0 &&\n            <h2>You selected: {frequency}</h2>\n          }\n          <ListBox\n            isLoading={isLoading}\n            aria-label=\"Choose frequency\"\n            selectionMode=\"single\"\n            onSelectionChange={(selected) => downloadFile(selected)}\n            width=\"size-2400\">\n            {\n              names.map((ele) => <Item key={ele}>{ele}</Item>)\n            }\n          </ListBox>\n        </View>\n      </Grid>\n\n\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}